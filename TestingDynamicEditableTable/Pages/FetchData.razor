@page "/fetchdata"
@using TestingDynamicEditableTable.Data
@using ClosedXML.Excel
@inject WeatherForecastService ForecastService
@inject IJSRuntime jSRuntime
<PageTitle>Blazor Bootstrap - Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <RadzenDataGrid Data="@forecasts" TItem="WeatherForecast" AllowFiltering="true" AllowColumnResize="true" AllowSorting="true" PageSize="10" AllowPaging="true">

        <EmptyTemplate>
            <p class="datagrid-no-records">No matching results</p>
        </EmptyTemplate>

        <Columns>
            <RadzenDataGridColumn TItem="WeatherForecast" Property="Date" Title="Date">
                <Template Context="forecast">@forecast.Date.ToShortDateString()</Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="WeatherForecast" Property="TemperatureC" Title="Temp. (C)" />
            <RadzenDataGridColumn TItem="WeatherForecast" Property="TemperatureF" Title="Temp. (F)" />
            <RadzenDataGridColumn TItem="WeatherForecast" Property="Summary" Title="Summary" />


            <RadzenDataGridColumn TItem="WeatherForecast" Title="Action" TextAlign="TextAlign.Center" Width="100px" Sortable=false>
                <Template Context="item">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" class="edit-btn" Size="ButtonSize.Medium" @onclick="(args => ToggleEditMode(forecasts.ToList().IndexOf(item)))" />

                    </Template>
                <EditTemplate Context="item">
                    <div class="d-flex align-items-center">
                        <input @bind="@item.Date" class="form-control" disabled="@(editModes[forecasts.ToList().IndexOf(item)])" />
                        <input @bind="@item.TemperatureC" class="form-control" disabled="@(editModes[forecasts.ToList().IndexOf(item)])" />
                        <input @bind="@item.Summary" class="form-control" disabled="@(editModes[forecasts.ToList().IndexOf(item)])" />

                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Medium" @onclick="(args => SaveChanges(forecasts.ToList().IndexOf(item)))" disabled="@(editModes[forecasts.ToList().IndexOf(item)])" />
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Medium" Class="ms-1" @onclick="(args => CancelEdit(forecasts.ToList().IndexOf(item)))" disabled="@(editModes[forecasts.ToList().IndexOf(item)])" />
                    </div>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

<button @onclick="generateExcelWeather">Export to Excel</button>

@code {
    private Dictionary<int, bool> editModes = new Dictionary<int, bool>();
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));
    }

    private async Task GenerateExcel<T>(IEnumerable<T> data, string sheetName)
    {
        using (var workbook = new XLWorkbook())
        {
            var worksheet = workbook.Worksheets.Add(sheetName);

            // Merge cells A1:C1 and set the heading
            var mergedRange = worksheet.Range("A1:C1").Merge();
            mergedRange.Value = $"{sheetName}";
            mergedRange.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            mergedRange.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            mergedRange.Style.Font.Bold = true;
            mergedRange.Style.Font.FontSize = 20;
            mergedRange.Style.Fill.BackgroundColor = XLColor.LightGray;

            var propertyNames = typeof(T).GetProperties()
                               .Select(prop => prop.Name)
                               .ToList();
            // Add dynamic headings to row 3
            for (int i = 0; i < propertyNames.Count; i++)
            {
                var headingCell = worksheet.Cell(3, i + 1);
                headingCell.Value = propertyNames[i];
                headingCell.Style.Font.Bold = true;
                headingCell.Style.Fill.BackgroundColor = XLColor.LightGray;
                headingCell.Style.Border.BottomBorder = XLBorderStyleValues.Thin;
            }

            int dataRow = 4; // Start from row 4 for data

            foreach (var item in data)
            {
                // Populate data dynamically based on property names
                for (int i = 0; i < propertyNames.Count; i++)
                {
                    var value = typeof(T).GetProperty(propertyNames[i])?.GetValue(item);
                    worksheet.Cell(dataRow, i + 1).Value = value != null ? value.ToString() : string.Empty;
                }
                dataRow++;
            }

            // Auto-fit columns starting from row 3
            worksheet.ColumnsUsed().AdjustToContents();

            var bytes = new byte[0];
            using (var ms = new MemoryStream())
            {
                workbook.SaveAs(ms);
                bytes = ms.ToArray();
            }
            string fileName = $"{sheetName}.xlsx";
            await SaveAs(fileName, bytes);
        }
    }

    private async Task SaveAs(string fileName, byte[] data)
    {
        await jSRuntime.InvokeAsync<object>(
            "BlazorDownloadFile",
            fileName,
            Convert.ToBase64String(data)
        );
    }

    private async Task generateExcelWeather()
    {
        await GenerateExcel(forecasts, "WeatherForecast");
    }

    private void ToggleEditMode(int index)
    {
        if (editModes.ContainsKey(index))
        {
            editModes[index] = !editModes[index];
        }
        else
        {
            editModes[index] = true;
        }
    }

    private async Task SaveChanges(int index)
    {
        // Save changes to the item at the specified index
        // Optionally, you can handle validation here before saving

        // After saving, toggle edit mode off
        editModes[index] = false;
    }

    private void CancelEdit(int index)
    {
        // Optionally, you can revert changes made during editing
        // Toggle edit mode off
        editModes[index] = false;
    }


}
